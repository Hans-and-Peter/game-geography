# TODO snapci: we do not know how to propagate variables
export artefact_version=$(cat artefact_version)

# add AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_DEFAULT_REGION as secure environment variables

# ami-e012d48f ... ECS base image for micro, see http://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html
export instance_id=$(aws ec2 run-instances --count 1 --image-id ami-e012d48f --instance-type t2.micro --security-group-ids sg-e63e338e \
--subnet-id subnet-43f2632b --iam-instance-profile Arn="arn:aws:iam::081374885386:instance-profile/ecsInstanceRole" \
--associate-public-ip-address \
--output text --query 'Instances[*].InstanceId')

aws ec2 wait instance-status-ok --instance-ids $instance_id

export public_host=$( aws ec2 describe-instances --instance-id $instance_id \
--output text --query 'Reservations[*].Instances[*].NetworkInterfaces[*].Association.PublicDnsName' )

export task_revision=$(aws ecs register-task-definition --cli-input-json file://ecs_task_template.json \
--output text --query 'taskDefinition.revision')

# TODO templating: task-definition name duplicated with Maven and hardcoded
export service_version=$( ruby -e 'puts "'$artefact_version'".gsub(/\./, "_")' )
export serviceName=$( aws ecs create-service --service-name "game-geography-$service_version" --task-definition "hans-and-peter-game-geography:$task_revision" --desired-count 1 \
--output text --query 'service.serviceName' )

cd systemtest
mvn clean compile failsafe:integration-test failsafe:verify -Dgame.environment.baseuri=http://$public_host -Dgame.environment.port=8080
cd ..

# TODO build: finally
aws ec2 update-service --service ${serviceName} --desired-count 0
aws ec2 delete-service --service ${serviceName}

aws ec2 terminate-instances --instance-ids "$instance_id" \
--output text --query 'TerminatingInstances[*].CurrentState.Name'

# TODO aws: alternative/production way
# change ELB to the new instance
# wait for old instance to have zero load
# terminate old instance
